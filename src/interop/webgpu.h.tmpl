{{/*
 Copyright 2021 The Dawn Authors

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/}}

{{- Include "webgpu_common.tmpl" -}}

#ifndef DAWN_NODE_GEN_INTEROP_WEBGPU_H_
#define DAWN_NODE_GEN_INTEROP_WEBGPU_H_

#include "src/interop/core.h"

namespace wgpu {
namespace interop {

// Initialize() registers the WebGPU types with the Napi environment.
void Initialize(Napi::Env env);

{{  range $ := .Declarations}}
{{-        if IsDictionary $}}{{template "Dictionary" $}}
{{-   else if IsInterface  $}}{{template "Interface" $}}
{{-   else if IsEnum       $}}{{template "Enum" $}}
{{-   else if IsTypedef    $}}{{template "Typedef" $}}
{{-   end}}
{{- end}}

}  // namespace interop
}  // namespace wgpu

#endif // DAWN_NODE_GEN_INTEROP_WEBGPU_H_

{{- /**********************************************************************/ -}}

{{- define "Dictionary"}}
// dictionary {{$.Name}}
class {{$.Name}} {{- if $.Inherits }} : public {{$.Inherits}}{{end}} {
public:
{{   range $m := $.Members}}
{{-    if      IsConstructor $m}}  {{$.Name}}();
{{     else if IsMember      $m}}  {{template "DictionaryMember" $m}}
{{     end}}
{{-  end -}}
};

template<>
class Serializer<{{$.Name}}> {
public:
  static bool Unmarshal(Napi::Env, Napi::Value, {{$.Name}}&);
  static Napi::Value Marshal(Napi::Env, {{$.Name}});
};

std::ostream& operator<<(std::ostream& o, const {{$.Name}}& desc);
{{ end}}

{{- /**********************************************************************/ -}}

{{- define "Interface"}}
// interface {{$.Name}}
class {{$.Name}} {{- if $.Inherits }} : public {{$.Inherits}}{{end}} {
public:
  static Interface<{{$.Name}}> Bind(Napi::Env, std::unique_ptr<{{$.Name}}>&&);
  static {{$.Name}}* Unwrap(Napi::Object);

  template<typename T, typename ... ARGS>
  static inline Interface<{{$.Name}}> Create(Napi::Env env, ARGS&& ... args) {
    return Bind(env, std::make_unique<T>(std::forward<ARGS>(args)...));
  }

  virtual ~{{$.Name}}();
  {{$.Name}}();
{{-  range $m := MethodsOf $}}
{{-    template "InterfaceMethod" $m}}
{{-  end}}
{{-  range $a := AttributesOf $}}
{{-    template "InterfaceAttribute" $a}}
{{-  end}}
{{-  range $c := ConstantsOf  $}}
{{-    template "InterfaceConstant" $c}}
{{-  end}}
};
{{ end}}

{{- /**********************************************************************/ -}}

{{- define "Typedef"}}
using {{$.Name}} = {{template "Type" $.Type}};
{{ end}}

{{- /**********************************************************************/ -}}

{{- define "Enum"}}
enum class {{$.Name}} {
{{-  range $ := $.Values}}
  {{EnumEntryName $.Value}},
{{-  end}}
};

template<>
class Serializer<{{$.Name}}> {
public:
  static bool Unmarshal(Napi::Env, Napi::Value, {{$.Name}}&);
  static Napi::Value Marshal(Napi::Env, {{$.Name}});
};

std::ostream& operator<<(std::ostream& o, {{$.Name}});
{{ end}}

{{- /**********************************************************************/ -}}

{{- define "DictionaryMember"}}
{{-   if $.Attribute}}{{template "AttributeType" $}} {{$.Name}}
{{-     if $.Init}} = {{Eval "Literal" "Value" $.Init "Type" $.Type}}{{end}};
{{-   else          }}{{template "Type" $.Type}} {{$.Name}}({{template "Parameters" $.Parameters}});
{{-   end }}
{{- end }}

{{- /**********************************************************************/ -}}

{{- define "InterfaceMethod"}}
{{-   range $o := $.Overloads}}
  virtual {{template "Type" $o.Type}} {{$.Name}}(Napi::Env{{template "ParametersWithComma" $o.Parameters}}) = 0;
{{-   end }}
{{- end }}

{{- /**********************************************************************/ -}}

{{- define "InterfaceAttribute"}}
  virtual {{template "Type" $.Type}} get{{Title $.Name}}(Napi::Env) = 0;
{{-   if not $.Readonly}}
  virtual void set{{Title $.Name}}(Napi::Env, {{template "Type" $.Type}} value) = 0;
{{-   end }}
{{- end }}

{{- /**********************************************************************/ -}}

{{- define "InterfaceConstant"}}
  static constexpr {{template "Type" $.Type}} {{$.Name}} = {{Eval "Literal" "Value" $.Init "Type" $.Type}};
{{- end }}

{{- /**********************************************************************/ -}}

{{- define "Parameters"}}
{{-   range $i, $param := $ }}
{{-     if $i }}, {{end}}
{{-     template "Parameter" $param}}
{{-   end }}
{{- end }}

{{- /**********************************************************************/ -}}

{{- define "ParametersWithComma"}}
{{-   range $i, $param := $ }}, {{/*  */}}
{{-     template "Parameter" $param}}
{{-   end }}
{{- end }}

{{- /**********************************************************************/ -}}

{{- define "Parameter" -}}
{{-   if $.Optional -}}
std::optional<{{template "Type" $.Type}}> {{$.Name}}
{{-   else}}
{{-     template "Type" $.Type}} {{$.Name}}
{{-   end}}
{{- end}}

{{- /**********************************************************************/ -}}

{{- define "Type" -}}
{{-   if      IsTypeName         $}}
{{-          if eq $.Name "undefined"      }}void
{{-     else if eq $.Name "boolean"        }}bool
{{-     else if eq $.Name "object"         }}Object
{{-     else if eq $.Name "DOMString"      }}std::string
{{-     else if eq $.Name "USVString"      }}std::string
{{-     else if IsInterface (Lookup $.Name)}}Interface<{{$.Name}}>
{{-     else                               }}{{$.Name}}
{{-     end                                }}
{{-   else if IsParametrizedType $}}{{$.Name}}<{{template "TypeList" $.Elems}}>
{{-   else if IsNullableType     $}}std::optional<{{template "Type" $.Type}}>
{{-   else if IsUnionType        $}}std::variant<{{template "TypeList" $.Types}}>
{{-   else if IsSequenceType     $}}std::vector<{{template "Type" $.Elem}}>
{{-   else if IsRecordType       $}}std::unordered_map<{{template "Type" $.Key}}, {{template "Type" $.Elem}}>
{{-   else                        }} /* Unhandled Type {{printf "%T" $}} */
{{-   end -}}
{{- end }}

{{- /**********************************************************************/ -}}

{{- define "TypeList" -}}
{{-   range $i, $ty := $}}
{{-     if $i }}, {{end}}
{{-     template "Type" $ty}}
{{-   end}}
{{- end }}

