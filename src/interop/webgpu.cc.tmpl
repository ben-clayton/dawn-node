{{/*
 Copyright 2021 The Dawn Authors

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/}}

{{- Include "webgpu_common.tmpl" -}}

#include "interop/webgpu.h"

#include <unordered_map>

#include "src/utils/debug.h"

namespace wgpu {
namespace interop {

namespace {

{{template "Wrappers" $}}

}  // namespace

{{ range $ := .Declarations}}
{{-        if IsDictionary $}}{{template "Dictionary" $}}
{{-   else if IsInterface  $}}{{template "Interface"  $}}
{{-   else if IsEnum       $}}{{template "Enum"       $}}
{{-   end}}
{{- end}}


Napi::Object InitWebGPUInterfaces(Napi::Env env, Napi::Object exports) {
  auto* wrapper = Wrappers::Init(env);
  auto global = env.Global();
{{ range $ := .Declarations}}
{{-   if IsInterface $}}
  global.Set(Napi::String::New(env, "{{$.Name}}"), wrapper->{{$.Name}}_ctor.Value());
{{-   end}}
{{- end}}
  return exports;
}

}  // namespace interop
}  // namespace wgpu

{{- /**********************************************************************/ -}}

{{- define "Dictionary"}}
bool Serializer<{{$.Name}}>::Unmarshal(Napi::Env env, Napi::Value value, {{$.Name}}& out) {
  auto object = value.ToObject();
  return true{{template "UnmarshalDictionaryMembers" $}};
}

Napi::Value Serializer<{{$.Name}}>::Marshal(Napi::Env env, {{$.Name}} value) {
  auto object = Napi::Object::New(env);
{{- template "MarshalDictionaryMembers" $}}
  return object;
}

std::ostream& operator<<(std::ostream& o, const {{$.Name}}& dict) {
    o << "{{$.Name}} {";
{{-    range $i, $m := $.Members}}
    o << {{if $i}}", "{{else}}" "{{end}} << "{{$m.Name}}: ";
    Write(o, dict.{{$m.Name}});
{{-    end          }}
    o << "}" << std::endl;
    return o;
}
{{ end}}

{{- /**********************************************************************/ -}}

{{- define "UnmarshalDictionaryMembers"}}
{{-    if $.Inherits}}{{template "UnmarshalDictionaryMembers" (Lookup $.Inherits)}}{{end}}
{{-    range $i, $m := $.Members}} &&
    {{/* indent */}}
{{-      if   $m.Init }}interop::UnmarshalOptional(env, object.Get("{{$m.Name}}"), out.{{$m.Name}})
{{-      else         }}interop::Unmarshal(env, object.Get("{{$m.Name}}"), out.{{$m.Name}})
{{-      end          }}
{{-    end}}
{{- end}}

{{- /**********************************************************************/ -}}

{{- define "MarshalDictionaryMembers"}}
{{-    if $.Inherits}}{{template "MarshalDictionaryMembers" (Lookup $.Inherits)}}{{end}}
{{-    range $m := $.Members}}
  object.Set(Napi::String::New(env, "{{$m.Name}}"), interop::Marshal(env, value.{{$m.Name}}));
{{-    end}}
{{- end}}

{{- /**********************************************************************/ -}}

{{- define "Wrappers"}}
class Wrappers {
  Wrappers(Napi::Env env) {
{{-   range $ := .Declarations}}
{{-     if IsInterface $}}
    {{$.Name}}_ctor = Napi::Persistent(W{{$.Name}}::Class(env));
{{-     end}}
{{-   end}}
  }

  static Wrappers* instance;

public:
{{-   range $ := .Declarations}}
{{-     if IsInterface $}}{{template "InterfaceWrapper" $}}
{{-     end}}
{{-   end}}

  static Wrappers* Init(Napi::Env env) {
    instance = new Wrappers(env);
    return instance;
  }

  static void Term(Napi::Env env) {
    delete instance;
    instance = nullptr;
  }

  static Wrappers* For(Napi::Env env) {
    return instance;
  }

{{   range $ := .Declarations}}
{{-     if IsInterface $}}
  Napi::FunctionReference {{$.Name}}_ctor;
{{-     end}}
{{-   end}}
};

Wrappers* Wrappers::instance = nullptr;
{{- end}}

{{- /**********************************************************************/ -}}

{{- define "InterfaceWrapper"}}
  struct W{{$.Name}} : public Napi::ObjectWrap<W{{$.Name}}> {
    std::unique_ptr<{{$.Name}}> impl;

    static Napi::Function Class(Napi::Env env) {
      return DefineClass(env, "{{$.Name}}", {
{{-  range $m := MethodsOf $}}
        InstanceMethod("{{$m.Name}}", &W{{$.Name}}::{{$m.Name}}),
{{-  end}}
{{-  range $a := AttributesOf $}}
        InstanceAccessor("{{$a.Name}}", &W{{$.Name}}::get{{Title $a.Name}},
{{-    if $a.Readonly}} nullptr{{else}} &W{{$.Name}}::set{{Title $a.Name}}{{end -}}
        ),
{{-  end}}
{{-  range $c := ConstantsOf $}}
        StaticValue("{{$c.Name}}", Marshal(env, {{$.Name}}::{{$c.Name}})),
{{-  end}}
      });
    }

    W{{$.Name}}(const Napi::CallbackInfo& info) : ObjectWrap(info) {}
{{-  range $m := MethodsOf $}}
    Napi::Value {{$m.Name}}(const Napi::CallbackInfo& info) {
{{-    range $overload_idx, $o := $m.Overloads}}
      { // Overload {{$overload_idx}}
        std::tuple<
{{-        range $i, $p := $o.Parameters}}
{{-          if $i}}, {{end}}
{{-          if $p.Optional}}std::optional<{{template "Type" $p.Type}}>
{{-          else          }}{{template "Type" $p.Type}}
{{-          end}}
{{-        end}}> args;
        if (UnmarshalArgs(info, args)) {
          {{/* indent */}}INTEROP_LOG(
{{-        range $i, $p := $o.Parameters}}
{{-          if $i}}, ", {{$p.Name}}: "{{else}}"{{$p.Name}}: "{{end}}, std::get<{{$i}}>(args)
{{-        end}});
          {{/* indent */}}
{{-      if not (IsUndefinedType $o.Type) }}auto result = {{end -}}
          impl->{{$o.Name}}(info.Env(){{range $i, $_ := $o.Parameters}}, std::get<{{$i}}>(args){{end}});
          {{/* indent */ -}}
{{-      if   IsUndefinedType $o.Type}}return info.Env().Null();
{{-      else                        }}return Marshal(info.Env(), result);
{{-      end                         }}
        }
      }
{{-    end}}
      Napi::Error::New(info.Env(), "invalid arguments to {{$m.Name}}").ThrowAsJavaScriptException();
      return {};
    }
{{-  end}}

{{-  range $a := AttributesOf $}}
    Napi::Value get{{Title $a.Name}}(const Napi::CallbackInfo& info) {
      return Marshal(info.Env(), impl->get{{Title $a.Name}}(info.Env()));
    }
{{-   if not $a.Readonly}}
    void set{{Title $a.Name}}(const Napi::CallbackInfo& info, const Napi::Value& value) {
      {{template "Type" $a.Type}} v{};
      if (Unmarshal(info.Env(), value, v)) {
        impl->set{{Title $a.Name}}(info.Env(), std::move(v));
      } else {
        Napi::Error::New(info.Env(), "invalid value to {{$a.Name}}").ThrowAsJavaScriptException();
      }
    }
{{-   end }}
{{-  end}}
  };
{{end}}

{{- /**********************************************************************/ -}}

{{- define "Interface"}}
{{$.Name}}::{{$.Name}}() = default;

{{$.Name}}* {{$.Name}}::Unwrap(Napi::Object object) {
  auto* wrappers = Wrappers::For(object.Env());
  if (!object.InstanceOf(wrappers->{{$.Name}}_ctor.Value())) {
    return nullptr;
  }
  return Wrappers::W{{$.Name}}::Unwrap(object)->impl.get();
}

Interface<{{$.Name}}> {{$.Name}}::Bind(Napi::Env env, std::unique_ptr<{{$.Name}}>&& impl) {
  auto* wrappers = Wrappers::For(env);
  auto object = wrappers->{{$.Name}}_ctor.New({});
  auto* wrapper = Wrappers::W{{$.Name}}::Unwrap(object);
  wrapper->impl = std::move(impl);
  return Interface<{{$.Name}}>(object);
}

{{$.Name}}::~{{$.Name}}() {}
{{ end}}

{{- /**********************************************************************/ -}}

{{- define "Enum"}}
bool Serializer<{{$.Name}}>::Unmarshal(Napi::Env env, Napi::Value value, {{$.Name}}& out) {
  std::string str = value.ToString();
{{-  range $e := $.Values}}
  if (str == {{$e.Value}}) {
    out = {{$.Name}}::{{EnumEntryName $e.Value}};
    return true;
  }
{{-  end}}
  return false;
}
Napi::Value Serializer<{{$.Name}}>::Marshal(Napi::Env env, {{$.Name}} value) {
  switch (value) {
{{-  range $e := $.Values}}
  case {{$.Name}}::{{EnumEntryName $e.Value}}:
    return Napi::String::New(env, {{$e.Value}});
    break;
{{-  end}}
  }
  return env.Undefined();
}

std::ostream& operator<<(std::ostream& o, {{$.Name}} value) {
  switch (value) {
{{-  range $e := $.Values}}
    case {{$.Name}}::{{EnumEntryName $e.Value}}:
      return o << {{$e.Value}};
{{-  end}}
  }
  return o << "undefined<{{$.Name}}>";
}

{{end}}
